<?php

namespace JordanHavard\ClickSend\Test;

use ClickSendSubaccountTest;
use JordanHavard\ClickSend\ClickSendClient;
use JordanHavard\ClickSend\ClickSendSubaccount;
class ClickSendSubaccountsTest extends TestCase
{
    private $client = null;
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->client = new ClickSendClient('mainaccount_username', 'main_apikey_or_password');
    }

    public function test_subaccount_methods() {

        // create properties for new subaccount
        $properties = new ClickSendSubaccount();
        $properties->email = 'new_account@yourdomain.com'; // must be unique in clicksend
        $properties->api_username = 'test_youraccount1'; // must be unique in clicksend
        $properties->password = 'Adfgdf@1314SDDSF2@#!dssadfas';
        $properties->first_name = 'FirstName';
        $properties->last_name = 'LastName';
        $properties->phone_number = '+61415111222';

        // send create request and run assertions
        $response = $this->client->getSubaccounts()->create($properties);

        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'New account has been created.');
        $subaccountId = $response->data->subaccount_id;
        $this->assertNotSame($subaccountId,'');
        $this->assertGreaterThan(0,$subaccountId);


        // list all subaccounts
        $response = $this->client->getSubaccounts()->index();
        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'SUCCESS');
        $this->assertGreaterThan(0,count($response->data->data));


        // view an individual subaccount
        $response = $this->client->getSubaccounts()->view($subaccountId);
        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'Here is your subaccount.');
        $this->assertSame($response->data->subaccount_id,$subaccountId);

        // update the subaccount we created earlier
        $updatedProperties = new ClickSendSubaccount();
        $updatedProperties->email = 'new_account1@yourdomain.com'; // must be unique in clicksend
        $updatedProperties->api_username = 'test_youraccount2'; // must be unique in clicksend
        $updatedProperties->password = 'Adfgdf@1314SDDSF2@#!dssadfas2';
        $updatedProperties->first_name = 'FirstNameUpdated';
        $updatedProperties->last_name = 'LastNameUpdated';
        $updatedProperties->phone_number = '+61415333444';

        $response = $this->client->getSubaccounts()->update($subaccountId, $updatedProperties);
        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'Subaccount has been updated.');
        $updatedProperties = $response->data;
        $this->assertNotSame($updatedProperties->email,$properties->email);
        $this->assertNotSame($updatedProperties->api_username,$properties->api_username);
        $this->assertNotSame($updatedProperties->first_name,$properties->first_name);
        $this->assertNotSame($updatedProperties->last_name,$properties->last_name);
        $this->assertNotSame($updatedProperties->phone_number,$properties->phone_number);



        // regenerate a new key
        $response = $this->client->getSubaccounts()->generate_new_api_key($subaccountId);
        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'Your API Key has been regenerated.');
        $this->assertNotNull($response->data->api_key);

        // delete the account we created earlier
        $response = $this->client->getSubaccounts()->delete($subaccountId);

        $this->assertSame($response->http_code,200);
        $this->assertSame($response->response_msg,'Subaccount has been deleted');

    }

}
